{"version":3,"file":"package.js","sourceRoot":"","sources":["../../../src/lib/ng-package-format/package.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAI7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH;IACE,YACmB,QAAgB;QACjC;;WAEG;QACa,OAAqB;QACrC;;WAEG;QACa,cAA8B,EAAE;QAR/B,aAAQ,GAAR,QAAQ,CAAQ;QAIjB,YAAO,GAAP,OAAO,CAAc;QAIrB,gBAAW,GAAX,WAAW,CAAqB;IAC/C,CAAC;IAEJ,wGAAwG;IACxG,IAAW,GAAG;QACZ,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,sCAAsC;IACtC,IAAW,cAAc;QACvB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC7C,CAAC;IAED,4DAA4D;IAC5D,IAAW,IAAI;QACb,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAED,6FAA6F;IAC7F,IAAW,gBAAgB;QACzB,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,CAAC;IAC1D,CAAC;IAEO,uBAAuB,CAAC,GAAW;QACzC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEM,UAAU,CAAC,QAAgB;QAChC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;IAClG,CAAC;CACF;AAxCD,8BAwCC","sourcesContent":["import * as path from 'path';\nimport { NgEntryPoint } from './entry-point';\nimport { DirectoryPath, SourceFilePath } from './shared';\n\n/**\n * A package being built. Quoting Angular Package Format, a package is:\n *\n * > the smallest set of files that are published to NPM and installed together, for example\n * > `@angular/core`. (..) The package is installed with `npm install @angular/core`.\n *\n * #### Package and Entry Points\n *\n * A package is composed of several (one or more) entry points.\n * A package must contain at least the primary entry point but can have many secondary entry\n * points.\n * The module ID of the primary entry point, e.g. `@angular/core`, matches the package name, e.g.\n * the package name is given to the command `npm install @angular/core`.\n * The source code files within a package are referenced by the entry points.\n *\n * #### Representation in the domain\n *\n * A _Package_ is reflected by `NgPackage`.\n * An _Entry Point_ is reflected by `NgEntryPoint`.\n * One `NgPackage` relates to one (or many) `NgEentryPoint`,\n * one `NgEntryPoint` relates to one `NgPackage`.\n *\n * #### Watch Out\n *\n * The user's configuration `ngPackage` suggests that it reflects a `NgPackage`.\n * However, the values given in the `lib` property reflect an `NgEntryPoint`.\n * In case the package contains only one entry point, `ngPackage.lib` reflects the primary entry\n * point.\n *\n * @link https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#\n */\nexport class NgPackage {\n  constructor(\n    private readonly basePath: string,\n    /**\n     * A reference to the primary entry point.\n     */\n    public readonly primary: NgEntryPoint,\n    /**\n     * An array of seconary entry points.\n     */\n    public readonly secondaries: NgEntryPoint[] = []\n  ) {}\n\n  /** Absolute path of the package's source folder, derived from the user's (primary) package location. */\n  public get src(): DirectoryPath {\n    return this.basePath;\n  }\n\n  /** Delete output path before build */\n  public get deleteDestPath(): boolean {\n    return this.primary.$get('deleteDestPath');\n  }\n\n  /** Absolute path of the package's destination directory. */\n  public get dest(): DirectoryPath {\n    return this.absolutePathFromPrimary('dest');\n  }\n\n  /** Absolute path of the package's working directory (used for intermediate file storage). */\n  public get workingDirectory(): DirectoryPath {\n    return this.absolutePathFromPrimary('workingDirectory');\n  }\n\n  private absolutePathFromPrimary(key: string) {\n    return path.resolve(this.basePath, this.primary.$get(key));\n  }\n\n  public entryPoint(moduleId: string): NgEntryPoint {\n    return [this.primary, ...this.secondaries].find(entryPoint => entryPoint.moduleId === moduleId);\n  }\n}\n"]}