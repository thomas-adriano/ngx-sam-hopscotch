{"version":3,"file":"entry-point.transform.js","sourceRoot":"","sources":["../../../src/lib/ng-v5/entry-point.transform.ts"],"names":[],"mappings":";;;;;;;;;;AAKA,yCAAsC;AAEtC,wCAAmE;AACnE,4CAAwD;AACxD,kDAAqE;AACrE,mCAAmC;AACnC,2CAAwC;AACxC,mCAAuC;AAEvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACU,QAAA,0BAA0B,GAAG,CACxC,iBAA4B,EAC5B,eAA0B,EAC1B,kBAA6B,EAC7B,SAAoB,EACpB,YAAuB,EACvB,kBAA6B,EAC7B,YAAuB,EACZ,EAAE,CACb,WAAI;AACF,+DAA+D;AAE/D,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;IACjC,4CAA4C;IAC5C,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAY,EAAE,CAAC,GAAG,CAAC,gBAAO,CAAC,CAAC,CAAC;IAE3D,wCAAwC;IACxC,UAAU,CAAC,KAAK,GAAG,uBAAgB,CAAC;IACpC,GAAG,CAAC,IAAI,CAAC,yBAAyB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,CAAC,CAAC;IAE1E,wBAAwB;IACxB,MAAM,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAChE,CAAC,CAAA,CAAC;AACF,oCAAoC;AACpC,iBAAiB,EACjB,eAAe;AACf,wCAAwC;AACxC,kBAAkB;AAClB,iCAAiC;AACjC,SAAS;AACT,+CAA+C;AAC/C,YAAY,EACZ,kBAAkB,EAClB,YAAY,EAEZ,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;IACjC,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAY,EAAE,CAAC,GAAG,CAAC,qBAAY,CAAC,CAAC,CAAC;IAChE,UAAU,CAAC,KAAK,GAAG,iBAAU,CAAC;AAChC,CAAC,CAAA,CAAC;AAEF,+BAA+B;CAChC,CAAC;AAEJ,eAAqB,GAAG,KAAe;;QACrC,GAAG,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QACrC,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC;YACvB,MAAM,eAAM,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;CAAA","sourcesContent":["import { InjectionToken, FactoryProvider, ValueProvider } from 'injection-js';\nimport { Observable } from 'rxjs/Observable';\nimport { of as observableOf } from 'rxjs/observable/of';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { pipe } from 'rxjs/util/pipe';\nimport { BuildGraph } from '../brocc/build-graph';\nimport { Node, STATE_IN_PROGESS, STATE_DONE } from '../brocc/node';\nimport { isDirty, isInProgress } from '../brocc/select';\nimport { Transform, transformFromPromise } from '../brocc/transform';\nimport * as log from '../util/log';\nimport { rimraf } from '../util/rimraf';\nimport { byEntryPoint } from './nodes';\n\n/**\n * A re-write of the `transformSources()` script that transforms an entry point from sources to distributable format.\n *\n * Sources are TypeScript source files accompanied by HTML templates and xCSS stylesheets.\n * See the Angular Package Format for a detailed description of what the distributables include.\n *\n * The current transformation pipeline can be thought of as:\n *\n *  - clean\n *  - renderTemplates\n *  - renderStylesheets\n *  - transformTsSources (thereby inlining template and stylesheet data)\n *  - compileTs\n *  - writeBundles\n *    - bundleToFesm15\n *    - bundleToFesm5\n *    - bundleToUmd\n *    - bundleToUmdMin\n *  - relocateSourceMaps\n *  - writePackage\n *   - copyStagedFiles (bundles, esm, dts, metadata, sourcemaps)\n *   - writePackageJson\n *\n * The transformation pipeline is pluggable through the dependency injection system.\n * Sub-transformations are passed to this factory function as arguments.\n *\n * @param renderTemplates Transformation rendering HTML templates.\n * @param renderStylesheets Transformation rendering xCSS stylesheets.\n * @param transformTsSources Transformation manipulating the typescript source files (thus inlining template and stylesheet data).\n * @param compileTs Transformation compiling typescript sources to ES2015 modules.\n * @param writeBundles Transformation flattening ES2015 modules to ESM2015, ESM5, UMD, and minified UMD.\n * @param relocateSourceMaps Transformation re-locating (adapting) paths in the source maps.\n * @param writePackage Transformation writing a distribution-ready `package.json` (for publishing to npm registry).\n */\nexport const entryPointTransformFactory = (\n  renderStylesheets: Transform,\n  renderTemplates: Transform,\n  transformTsSources: Transform,\n  compileTs: Transform,\n  writeBundles: Transform,\n  relocateSourceMaps: Transform,\n  writePackage: Transform\n): Transform =>\n  pipe(\n    //tap(() => log.info(`Building from sources for entry point`)),\n\n    transformFromPromise(async graph => {\n      // Peek the first entry point from the graph\n      const entryPoint = graph.find(byEntryPoint().and(isDirty));\n\n      // Mark the entry point as 'in-progress'\n      entryPoint.state = STATE_IN_PROGESS;\n      log.info(`Building entry point '${entryPoint.data.entryPoint.moduleId}'`);\n\n      // Clean build directory\n      await clean(entryPoint.data.stageDir, entryPoint.data.outDir);\n    }),\n    // Stylesheet and template rendering\n    renderStylesheets,\n    renderTemplates,\n    // Inlining of stylesheets and templates\n    transformTsSources,\n    // TypeScript sources compilation\n    compileTs,\n    // After TypeScript: bundling and write package\n    writeBundles,\n    relocateSourceMaps,\n    writePackage,\n\n    transformFromPromise(async graph => {\n      const entryPoint = graph.find(byEntryPoint().and(isInProgress));\n      entryPoint.state = STATE_DONE;\n    })\n\n    //tap(() => log.info(`Built.`))\n  );\n\nasync function clean(...paths: string[]) {\n  log.info('Cleaning build directory');\n  for (let path of paths) {\n    await rimraf(path);\n  }\n}\n"]}