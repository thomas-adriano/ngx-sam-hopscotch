"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const concat_1 = require("rxjs/observable/concat");
const fromPromise_1 = require("rxjs/observable/fromPromise");
const of_1 = require("rxjs/observable/of");
const operators_1 = require("rxjs/operators");
const pipe_1 = require("rxjs/util/pipe");
const log = require("../util/log");
const copy_1 = require("../util/copy");
const rimraf_1 = require("../util/rimraf");
const nodes_1 = require("./nodes");
const discover_packages_1 = require("./discover-packages");
/**
 * A transformation for building an npm package:
 *
 *  - discoverPackages
 *  - initTsConfig
 *  - analyzeTsSources (thereby extracting template and stylesheet files)
 *  - for each entry point
 *    - run the entryPontTransform
 *  - writeNpmPackage
 *
 * @param project Project token, reference to `ng-package.json`
 * @param initTsConfigTransform Transformation initializing the tsconfig of each entry point.
 * @param analyseSourcesTransform Transformation analyzing the typescript source files of each entry point.
 * @param entryPointTransform Transformation for asset rendering and compilation of a single entry point.
 */
exports.packageTransformFactory = (project, initTsConfigTransform, analyseSourcesTransform, entryPointTransform) => (source$) => {
    const pkgUri = nodes_1.ngUrl(project);
    return source$.pipe(operators_1.tap(() => {
        log.info(`Building Angular Package`);
    }), 
    // Discover packages and entry points
    operators_1.switchMap(graph => {
        const pkg = discover_packages_1.discoverPackages({ project });
        return fromPromise_1.fromPromise(pkg).pipe(operators_1.map(value => {
            const ngPkg = new nodes_1.PackageNode(pkgUri);
            ngPkg.data = value;
            return graph.put(ngPkg);
        }));
    }), 
    // Clean the primary dest folder (should clean all secondary sub-directory, as well)
    operators_1.switchMap(graph => {
        const { dest, deleteDestPath } = graph.get(pkgUri).data;
        return fromPromise_1.fromPromise(deleteDestPath ? rimraf_1.rimraf(dest) : Promise.resolve());
    }, (graph, _) => graph), 
    // Add entry points to graph
    operators_1.map(graph => {
        const ngPkg = graph.get(pkgUri);
        const entryPoints = [ngPkg.data.primary, ...ngPkg.data.secondaries].map(entryPoint => {
            // TODO: use `os-tmpdir` instead -> https://www.npmjs.com/package/os-tmpdir
            // import * as tmpdir from 'os-tempdir'; tmpdir();
            const stageDir = path.resolve(ngPkg.data.workingDirectory, entryPoint.flatModuleFile, 'stage');
            const outDir = path.resolve(ngPkg.data.workingDirectory, entryPoint.flatModuleFile, 'out');
            const node = new nodes_1.EntryPointNode(nodes_1.ngUrl(entryPoint.moduleId));
            node.data = { entryPoint, outDir, stageDir };
            node.state = 'dirty';
            ngPkg.dependsOn(node);
            return node;
        });
        return graph.put(entryPoints);
    }), 
    // Initialize the tsconfig for each entry point
    initTsConfigTransform, 
    // Analyse dependencies and external resources for each entry point
    analyseSourcesTransform, 
    // Next, run through the entry point transformation (assets rendering, code compilation)
    operators_1.switchMap(graph => {
        const eachEntryPoint$ = graph.filter(nodes_1.isEntryPoint).map(() => of_1.of(graph).pipe(entryPointTransform));
        return concat_1.concat(...eachEntryPoint$).pipe(operators_1.takeLast(1));
    }), 
    // Write npm package to dest folder
    writeNpmPackage(pkgUri), operators_1.tap(graph => {
        const ngPkg = graph.get(pkgUri);
        log.success(`Built Angular Package!
- from: ${ngPkg.data.src}
- to:   ${ngPkg.data.dest}`);
    }));
};
const writeNpmPackage = (pkgUri) => pipe_1.pipe(operators_1.switchMap(graph => {
    const ngPkg = graph.get(pkgUri);
    return fromPromise_1.fromPromise(Promise.all([
        copy_1.copyFiles(`${ngPkg.data.src}/README.md`, ngPkg.data.dest),
        copy_1.copyFiles(`${ngPkg.data.src}/LICENSE`, ngPkg.data.dest),
        rimraf_1.rimraf(ngPkg.data.workingDirectory)
    ])).pipe(operators_1.map(() => graph));
}));
//# sourceMappingURL=package.transform.js.map