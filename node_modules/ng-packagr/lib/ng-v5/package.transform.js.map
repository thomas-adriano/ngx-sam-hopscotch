{"version":3,"file":"package.transform.js","sourceRoot":"","sources":["../../../src/lib/ng-v5/package.transform.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport { Observable } from 'rxjs/Observable';\nimport { concat as concatStatic } from 'rxjs/observable/concat';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { of as observableOf } from 'rxjs/observable/of';\nimport { map, retry, switchMap, takeLast, tap } from 'rxjs/operators';\nimport { pipe } from 'rxjs/util/pipe';\nimport { BuildGraph } from '../brocc/build-graph';\nimport { Node } from '../brocc/node';\nimport { Transform } from '../brocc/transform';\nimport * as log from '../util/log';\nimport { copyFiles } from '../util/copy';\nimport { rimraf } from '../util/rimraf';\nimport { PackageNode, EntryPointNode, ngUrl, isEntryPoint } from './nodes';\nimport { discoverPackages } from './discover-packages';\n\n/**\n * A transformation for building an npm package:\n *\n *  - discoverPackages\n *  - initTsConfig\n *  - analyzeTsSources (thereby extracting template and stylesheet files)\n *  - for each entry point\n *    - run the entryPontTransform\n *  - writeNpmPackage\n *\n * @param project Project token, reference to `ng-package.json`\n * @param initTsConfigTransform Transformation initializing the tsconfig of each entry point.\n * @param analyseSourcesTransform Transformation analyzing the typescript source files of each entry point.\n * @param entryPointTransform Transformation for asset rendering and compilation of a single entry point.\n */\nexport const packageTransformFactory = (\n  project: string,\n  initTsConfigTransform: Transform,\n  analyseSourcesTransform: Transform,\n  entryPointTransform: Transform\n) => (source$: Observable<BuildGraph>): Observable<BuildGraph> => {\n  const pkgUri = ngUrl(project);\n\n  return source$.pipe(\n    tap(() => {\n      log.info(`Building Angular Package`);\n    }),\n    // Discover packages and entry points\n    switchMap(graph => {\n      const pkg = discoverPackages({ project });\n\n      return fromPromise(pkg).pipe(\n        map(value => {\n          const ngPkg = new PackageNode(pkgUri);\n          ngPkg.data = value;\n\n          return graph.put(ngPkg);\n        })\n      );\n    }),\n    // Clean the primary dest folder (should clean all secondary sub-directory, as well)\n    switchMap(graph => {\n      const { dest, deleteDestPath } = graph.get(pkgUri).data;\n      return fromPromise(deleteDestPath ? rimraf(dest) : Promise.resolve());\n    }, (graph, _) => graph),\n    // Add entry points to graph\n    map(graph => {\n      const ngPkg = graph.get(pkgUri);\n\n      const entryPoints = [ngPkg.data.primary, ...ngPkg.data.secondaries].map(entryPoint => {\n        // TODO: use `os-tmpdir` instead -> https://www.npmjs.com/package/os-tmpdir\n        // import * as tmpdir from 'os-tempdir'; tmpdir();\n        const stageDir = path.resolve(ngPkg.data.workingDirectory, entryPoint.flatModuleFile, 'stage');\n        const outDir = path.resolve(ngPkg.data.workingDirectory, entryPoint.flatModuleFile, 'out');\n\n        const node = new EntryPointNode(ngUrl(entryPoint.moduleId));\n        node.data = { entryPoint, outDir, stageDir };\n        node.state = 'dirty';\n        ngPkg.dependsOn(node);\n\n        return node;\n      });\n\n      return graph.put(entryPoints);\n    }),\n    // Initialize the tsconfig for each entry point\n    initTsConfigTransform,\n    // Analyse dependencies and external resources for each entry point\n    analyseSourcesTransform,\n    // Next, run through the entry point transformation (assets rendering, code compilation)\n    switchMap(graph => {\n      const eachEntryPoint$ = graph.filter(isEntryPoint).map(() => observableOf(graph).pipe(entryPointTransform));\n\n      return concatStatic(...eachEntryPoint$).pipe(takeLast(1));\n    }),\n    // Write npm package to dest folder\n    writeNpmPackage(pkgUri),\n    tap(graph => {\n      const ngPkg = graph.get(pkgUri);\n      log.success(`Built Angular Package!\n- from: ${ngPkg.data.src}\n- to:   ${ngPkg.data.dest}`);\n    })\n  );\n};\n\nconst writeNpmPackage = (pkgUri: string): Transform =>\n  pipe(\n    switchMap(graph => {\n      const ngPkg = graph.get(pkgUri);\n\n      return fromPromise(\n        Promise.all([\n          copyFiles(`${ngPkg.data.src}/README.md`, ngPkg.data.dest),\n          copyFiles(`${ngPkg.data.src}/LICENSE`, ngPkg.data.dest),\n          rimraf(ngPkg.data.workingDirectory)\n        ])\n      ).pipe(map(() => graph));\n    })\n  );\n"]}